import React from 'react';
import { connect } from 'react-redux';
import { Modal, Row, Col, Spin, Form} from 'antd';
<%- include('include/comps', {list}) %>
import { actions, asyncUpdate } from './models';
import { formItemLayout, formatFormData } from './utils';
const FormItem = Form.Item;

class Edit extends React.Component {
    handleCancel = () => {
        this.props.form.resetFields();
        this.props.modalHide();
    };
    handleOk = () => {
        this.props.form.validateFields(async (err, values) => {
            if (!err) {
                await this.props.asyncUpdate(formatFormData(values));
                this.props.form.resetFields();
                this.props.modalHide();
            }
        });
    };
    render() {
        const { isModalShow, isLoading, item } = this.props;
        const { getFieldDecorator } = this.props.form;
        const form = (
            <Form>
                <Row>
                    <%
                        list.forEach(item => {
                    %>
                        <Col span={24}>
                            <FormItem {...formItemLayout} label="<%= item.title %>">
                                {getFieldDecorator('<%= item.name %>', {
                                    <%- include('include/values.ejs', {item}) %>
                                    rules: [
                                    <%- include('include/rules.ejs', {item}) %>
                                    ],
                                })(
                                    <%- include('include/input.ejs', {item, onchange: false}) %>
                                )}
                            </FormItem>
                        </Col>
                    <%
                        })
                    %>
                </Row>
            </Form>
        );
        return (
            <Modal
                title="查看详情"
                visible={isModalShow}
                onOk={this.handleOk}
                onCancel={this.handleCancel}
                confirmLoading={isLoading}
                maskClosable={false}>
                <Spin spinning={isLoading} tip="保存中..." >
                    {form}
                </Spin>
            </Modal>
        );
    }
}

const mapStateToProps = state => ({
    item: state.<%= stateKey %>.list.reduce((a, b) => (b.id === state.<%= stateKey %>.currentSelectId ? b : a), {}),
    isModalShow: state.<%= stateKey %>.uiStatus.isUpdateShow,
    isLoading: state.<%= stateKey %>.uiStatus.isLoading,
});

const mapDispatchToProps = dispatch => ({
    modalHide: () => dispatch(actions.changeUiStatus({ isUpdateShow: false })),
    asyncUpdate: contents => dispatch(asyncUpdate(contents)),
});

export default connect(mapStateToProps, mapDispatchToProps)(Form.create()(Edit));
